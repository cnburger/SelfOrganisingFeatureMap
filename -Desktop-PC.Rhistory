####------------------ Reading th data file-----------------------------
guns <- read.csv("gunKillingsInUSA.csv",header = T)
guns.transf <- guns
summary(guns.transf)
#### ----------------------------- Variables to drop -------------------------------
str(guns.transf)
#Dropping the victim name, source
guns.transf <- guns.transf[,-c(4,8)]
colNames<- c("Date_killed","City","State","Victim.Age","Victim.Age.Group","Victim.Gender",
"Lat","Long","State.population",
"BG.Checks.per.100K",
"LG_SP","LG_FR","LG_AL","LG_OL","LG_CP","LG_OC","LG_SLR","LG_NFAR","LG_PJ",
"HG_SP","HG_FR","HG_AL","HG_OL","HG_CP","HG_OC","HG_SLR","HG_NFAR","HG_PJ",
"Killed_year","Killed_month","Killed_day","Killed_week")
names(guns.transf)<- colNames
library(dummy)
library(mlr)
colnames(guns.transf)
createDummyFeatures(guns.transf, cols = "Victim.Age.Group")
guns.transf
colnames(guns.transf)
?createDummyFeatures
createDummyFeatures(guns.transf, cols = c("Victim.Age.Group","Victim.Gender","LG_SP","LG_FR","LG_AL",
"LG_OL" ,"LG_CP","LG_OC","LG_SLR","LG_NFAR","LG_PJ","HG_SP",
"HG_FR","HG_AL","HG_OL","HG_CP","HG_OC","HG_SLR","HG_NFAR"))
colnames(guns.transf)
matwithDummy <- createDummyFeatures(guns.transf, cols = c("Victim.Age.Group","Victim.Gender","LG_SP","LG_FR","LG_AL",
"LG_OL" ,"LG_CP","LG_OC","LG_SLR","LG_NFAR","LG_PJ","HG_SP",
"HG_FR","HG_AL","HG_OL","HG_CP","HG_OC","HG_SLR","HG_NFAR"))
str(matwithDummy)
matwithDummy$LG_AL.V1
sum(matwithDummy$LG_AL.V1)
sum(is.na(guns.transf$LG_AL))
guns.transf
is.na(guns.transf$LG_AL
)
guns.transf$LG_AL
(matwithDummy$LG_AL.V1)
is.na(guns.transf$LG_AL)
vector2 <- ((guns.transf$LG_AL == ""))
vector2
matwithDummy$LG_AL.V1
(matwithDummy$LG_AL.V1 == 1)
vector1 == vector2
vector1 <- (matwithDummy$LG_AL.V1 == 1)
vector2 <- ((guns.transf$LG_AL == ""))
vector1 == vector2
sum(vector1 == vector2)
sum(vector1 == vector2)
sum(vector1 != vector2)
matwithDummy$LG_AL.V1[5]
matwithDummy$LG_AL.V1[5] = 1
matwithDummy$LG_AL.V1[5]
vector1 <- (matwithDummy$LG_AL.V1 == 1)
vector2 <- ((guns.transf$LG_AL == ""))
sum(vector1 != vector2)
colnames(guns.transf)
matwithDummy <- createDummyFeatures(guns.transf, cols = c("Victim.Age.Group","Victim.Gender","LG_SP","LG_FR","LG_AL",
"LG_OL" ,"LG_CP","LG_OC","LG_SLR","LG_NFAR","LG_PJ","HG_SP",
"HG_FR","HG_AL","HG_OL","HG_CP","HG_OC","HG_SLR","HG_NFAR"))
vector1 <- (matwithDummy$LG_AL.V1 == 1)
vector2 <- ((guns.transf$LG_AL == ""))
sum(vector1 != vector2)
library(kohonen)
#Variables with "V1" in its name had missing values
unique(matwithDummy$City)
#Variables with "V1" in its name had missing values
unique(matwithDummy$State)
str(matwithDummy)
matwithDummy <- createDummyFeatures(guns.transf, cols = c("Victim.Age.Group","Victim.Gender","LG_SP","LG_FR","LG_AL",
"LG_OL" ,"LG_CP","LG_OC","LG_SLR","LG_NFAR","LG_PJ","HG_SP","HG_PJ",
"HG_FR","HG_AL","HG_OL","HG_CP","HG_OC","HG_SLR","HG_NFAR"))
str(matwithDummy)
matwithDummy <- createDummyFeatures(guns.transf, cols = c("State", "Victim.Age.Group","Victim.Gender","LG_SP","LG_FR","LG_AL",
"LG_OL" ,"LG_CP","LG_OC","LG_SLR","LG_NFAR","LG_PJ","HG_SP","HG_PJ",
"HG_FR","HG_AL","HG_OL","HG_CP","HG_OC","HG_SLR","HG_NFAR"))
str(matwithDummy)
####----------------------DROPPING MORE VARIABLES-------------------------------------
matforSOG <- matwithDummy[,-c(1,2,3,4,5,6,7)]
str(matforSOG)
ads.grid <- somgrid(xdim = 20, ydim = 20, topo = "hexagonal")
#####---------Data processing for the SOM
ads.train <- as.matrix(scale(matforSOG))
ads.train
str(ads.train)
matforSOG
ads.model <- som(ads.train, ads.grid, rlen =500, radius = 2.5, keep.data = TRUE, dist.fcts = "euclidean")
str(ads.model)
ads.model$unit.classif
plot(ads.model,type = "mapping", pchs =19, shape = round)
plot(ads.model,type = "mapping", pchs =19, shape = "round")
head(data.frame(ads.train),20)
plot(ads.model, type = "codes", main = "Codes Plot", palette.name = rainbow)
plot(ads.model, type = "changes")
plot(ads.model, type = "counts")
plot(ads.model, type = "dist.neighbours")
plot(ads.model, type = "counts")
plot(ads.model, type = "dist.neighbours")
heatmap.som <- function(model){
for (i in 1:10) {
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
colnames(ads.model)
colnames(getCodes(ads.model))
heatmap.som <- function(model){
for (i in 1:20) {
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
heatmap.som <- function(model){
for (i in 1:40) {
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
length(getCodes(ads.model))
getCodes(ads.model)
heatmap.som <- function(model){
for (i in 1:40) {
plot.new()
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
heatmap.som <- function(model){
for (i in 1:40) {
dev.new()
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
ads.model
summary(ads.model)
str(ads.model)
heatmap.som <- function(model){
for (i in 1:13) {
dev.new()
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
heatmap.som <- function(model){
for (i in 1:60) {
dev.new()
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
heatmap.som <- function(model){
for (i in 1:70) {
dev.new()
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
heatmap.som <- function(model){
for (i in 1:60) {
dev.new()
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
#CLUSTERING
library(factoextra)
#CLUSTERING
install.packages("factoextra")
fviz_nbclust(ads.model$codes[[1]], kmeans, method = "wss")
library(factoextra)
fviz_nbclust(ads.model$codes[[1]], kmeans, method = "wss")
clust <- kmeans(ads.model$codes[[1]], 6)
add.cluster.boundaries(ads.model, clust$cluster)
plot(ads.model, type = "codes", bgcol = rainbow(9)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
clust <- kmeans(ads.model$codes[[1]], 20)
plot(ads.model, type = "codes", bgcol = rainbow(9)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
clust <- kmeans(ads.model$codes[[1]], 10)
plot(ads.model, type = "codes", bgcol = rainbow(9)[clust$cluster], main = "Cluster Map")
clust <- kmeans(ads.model$codes[[1]], 12)
plot(ads.model, type = "codes", bgcol = rainbow(9)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
clust <- kmeans(ads.model$codes[[1]], 11)
plot(ads.model, type = "codes", bgcol = rainbow(9)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
clust <- kmeans(ads.model$codes[[1]], 10)
plot(ads.model, type = "codes", bgcol = rainbow(9)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
clust <- kmeans(ads.model$codes[[1]], 6)
plot(ads.model, type = "codes", bgcol = rainbow(9)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
clust <- kmeans(ads.model$codes[[1]], 6)
plot(ads.model, type = "codes", bgcol = rainbow(9)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
clust <- kmeans(ads.model$codes[[1]], 6)
plot(ads.model, type = "codes", bgcol = rainbow(9)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
clust <- kmeans(ads.model$codes[[1]], 6)
plot(ads.model, type = "codes", bgcol = rainbow(9)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
plot(ads.model, type = "codes", bgcol = rainbow(10)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
plot(ads.model, type = "codes", bgcol = rainbow(2)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
plot(ads.model, type = "codes", bgcol = rainbow(16)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
plot(ads.model, type = "counts")
plot(ads.model, type = "dist.neighbours")
plot(ads.model, type = "codes", main = "Codes Plot", palette.name = rainbow)
?plot
heatmap.som <- function(model){
for (i in 60:110) {
dev.new()
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
heatmap.som <- function(model){
for (i in 60:120) {
dev.new()
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
fviz_nbclust(ads.model$codes[[1]], kmeans, method = "wss")
clust <- kmeans(ads.model$codes[[1]], 6)
plot(ads.model, type = "codes", bgcol = rainbow(16)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
?fviz_nbclust
plot(ads.model, type = "codes", bgcol = rainbow(16)[clust$cluster], main = "Cluster Map")
add.cluster.boundaries(ads.model, clust$cluster)
plot(ads.model,type = "mapping", pchs =19, shape = "round")
plot(ads.model, type = "codes", main = "Codes Plot", palette.name = rainbow)
?palette.name
?palette
plot(ads.model, type = "changes")
plot(ads.model, type = "counts")
plot(ads.model, type = "dist.neighbours")
ads.grid <- somgrid(xdim = 10, ydim = 10, topo = "hexagonal")
ads.model <- som(ads.train, ads.grid, rlen =500, radius = 2.5, keep.data = TRUE, dist.fcts = "euclidean")
ads.model$unit.classif
plot(ads.model,type = "mapping", pchs =19, shape = "round")
plot(ads.model, type = "codes", main = "Codes Plot", palette.name = rainbow)
plot(ads.model, type = "changes")
plot(ads.model, type = "counts")
plot(ads.model, type = "dist.neighbours")
?plot
heatmap.som <- function(model){
for (i in 60:120) {
dev.new()
plot(model, type = "property", property = getCodes(model)[,i],
main = colnames(getCodes(model))[i])
}
}
heatmap.som(ads.model)
plot(ads.model,type = "mapping", pchs =19, shape = "round")
plot(ads.model)
ads.train
ads.train
